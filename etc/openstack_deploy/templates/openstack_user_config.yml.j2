# {{ ansible_managed }}
---
cidr_networks:
  container: {{ management_network }}
  tunnel: {{ tunnel_network }}
  storage: {{ storage_network }}

used_ips:
{% for ip_or_range in reserved_ips %}
  - {{ ip_or_range }}
{% endfor %}

global_overrides:
  internal_lb_vip_address: {{ internal_vip_addr }}
  external_lb_vip_address: {{ external_vip_addr }}
  management_bridge: "{{ management_network_interface }}"
  tunnel_bridge: "{{ tunnel_network_interface }}"
  storage_bridge: "{{ storage_network_interface }}"
  lb_name: haproxy
  # List of container and bare metal networks on target hosts.
  provider_networks:
    - network:
        container_bridge: "{{ management_network_interface }}"
        container_interface: "eth1"
        container_type: "veth"
        ip_from_q: "container"
        is_container_address: true
        is_ssh_address: true
        type: "raw"
        group_binds:
          - all_containers
          - hosts
    - network:
        container_bridge: "{{ storage_network_interface }}"
        container_interface: "eth2"
        container_type: "veth"
        container_mtu: "9000"
        ip_from_q: "storage"
        type: "raw"
        group_binds:
          - glance_api
          - cinder_api
          - cinder_volume
          - nova_compute
{% if 'swift' in onpc_services_list %}
          - swift_proxy
{% elif 'ceph' in onpc_services_list %}
          - ceph_osd
{% endif %}
    - network:
        container_bridge: "{{ tunnel_network_interface }}"
        container_type: "veth"
        container_interface: "eth10"
        container_mtu: "9000"
        ip_from_q: "tunnel"
        type: "vxlan"
        range: "1:1000"
        net_name: "vxlan"
        group_binds:
          - neutron_linuxbridge_agent
    - network:
        container_bridge: "{{ external_interface }}"
        container_type: "veth"
        container_interface: "eth11"
        type: "vlan"
        range: "1:1,100:200"
        net_name: "vlan"
        group_binds:
          - neutron_linuxbridge_agent
{% if 'swift' in onpc_services_list %}
  swift:
    part_power: 8
    repl_number: 3
    min_part_hours: 1
{%- raw %}
    storage_network: "{{ (container_tech != 'nspawn') | ternary(storage_network_interface, ansible_default_ipv4['alias']) }}"
    replication_network: "{{ (container_tech != 'nspawn') | ternary(storage_network_interface, ansible_default_ipv4['alias']) }}"
{% endraw %}
    statsd_host: localhost
    statsd_port: 8125
{%- raw %}
    statsd_metric_prefix: "{{ inventory_hostname }}.swift"
{% endraw %}
    storage_policies:
      - policy:
          name: default
          index: 0
          default: True
{% endif %} 

{% if controller_hosts_dict is defined and controller_hosts_dict | length > 0 %}
# Infrastructure (memcached, galera, rabbitmq, ...) hosts
_infrastructure_hosts: &infrastructure_hosts
{% for h in controller_hosts_dict %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
    container_vars:
      # Optional | container_tech for a target host, default is "lxc".
      container_tech: "{{ onpc_bootstrap_container_tech }}"
{% endfor %}
{% else %}
_infrastructure_hosts: &infrastructure_hosts
{% endif %}

# The shared infrastructure software (MariaDB/Galera and RabbitMQ)
shared-infra_hosts: *infrastructure_hosts

# The OpenStack API services such as Nova API and Glance API
os-infra_hosts: *infrastructure_hosts

# OpenStack-Ansible repository cache (apt, python packages, etc)
repo-infra_hosts: *infrastructure_hosts

# The servers that run the Keystone (OpenStack Identity) Service
identity_hosts: *infrastructure_hosts

# Nova API services
compute-infra_hosts: *infrastructure_hosts

# The Horizon (OpenStack Dashboard) service
dashboard_hosts: *infrastructure_hosts

# The hosts that run the Cinder API service
storage-infra_hosts:
{% for h in controller_hosts_dict %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
    container_vars:
      cinder_qos_specs:
        - name: low-iops
          options:
            consumer: front-end
            read_iops_sec: 75
            write_iops_sec: 75
          cinder_volume_types:
            - low-iops
        - name: high-iops
          options:
            consumer: front-end
            read_iops_sec: 150
            write_iops_sec: 150
          cinder_volume_types:
            - high-iops
        - name: ultra-high-iops
          options:
            consumer: front-end
            read_iops_sec: 300
            write_iops_sec: 300
          cinder_volume_types:
            - ultra-high-iops
{% endfor %}

{% if compute_hosts_dict is defined and compute_hosts_dict | length > 0 %}
# The compute hypervisor hosts
compute_hosts: &compute_hosts
{% for h in compute_hosts_dict %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
{% endfor %}
{% else %}
compute_hosts: &compute_hosts
{% endif %}

{% if rsyslog_hosts_dict is defined and rsyslog_hosts_dict | length > 0 %}
# The server(s) that run the rsyslog service (optional)
log_hosts:
  "{{ rsyslog_hosts_dict[0]['name'] }}":
    ip: "{{ rsyslog_hosts_dict[0]['ip_v4'] }}"
{% endif %}

{% if storage_hosts_dict is defined and storage_hosts_dict | length > 0 %}
# The Cinder storage LVM/iSCSI hosts
storage_hosts:
{% for h in storage_hosts_dict %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
    container_vars:
      cinder_backends:
        limit_container_types: cinder_volume
        lvm:
          volume_backend_name: LVM_iSCSI
          volume_driver: cinder.volume.drivers.lvm.LVMVolumeDriver
          volume_group: cinder-volumes
          iscsi_ip_address: {{ h.ip_v4 }}
          lvm_type: thin
          extra_volume_types:
            - low-iops
            - high-iops
            - ultra-high-iops
{% endfor %}
{% endif %}

{% if haproxy_hosts_dict is defined and haproxy_hosts_dict | length > 0 %}
# Where to install and configure HAProxy for load-balancing.
haproxy_hosts:
{% for h in haproxy_hosts_dict %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
{% endfor %}
{% endif %}

{% if network_hosts_dict is defined and network_hosts_dict | length > 0 %}
# The hosts that run Neutron agents and services 
network_hosts:
{% for h in network_hosts_dict %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
{% endfor %}
{% endif %}

{% if image_hosts_dict is defined and image_hosts_dict | length > 0 %}
# The hosts that run the Glance (OpenStack Image) service
image_hosts:
{% for h in image_hosts_dict %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
{% if 'ceph' not in onpc_services_list and 'swift' not in onpc_services_list %}
    container_vars:
      limit_container_types: glance
      glance_nfs_client:
        - server: {{ glance_nfs_store_host }}
          remote_path: /srv/nfs4/glance
          local_path: /var/lib/glance/images
          type: nfs
          options: "_netdev,auto"
{% endif %}
{% endfor %}
{% endif %}