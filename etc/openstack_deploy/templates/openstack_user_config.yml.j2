# {{ ansible_managed }}
---
cidr_networks:
  container: {{ container_network_cidr | default('172.29.236.0/22') }}
  tunnel: {{ tunnel_network_cidr | default('172.29.240.0/22') }}
  storage: {{ storage_network_cidr | default('172.29.244.0/22') }}

used_ips:
{% for ip_or_range in reserved_ips %}
  - "{{ ip_or_range }}"
{% endfor %}

global_overrides:
  internal_lb_vip_address: {{ internal_vip_address | default('172.29.236.100') }}
  # The external IP is quoted simply to ensure that the .aio file can be used as input
  # dynamic inventory testing.
  external_lb_vip_address: "{{ bootstrap_host_public_address | default(ansible_default_ipv4.address) }}"
  management_bridge: "br-mgmt"
  tunnel_bridge: "br-vxlan"
  provider_networks:
    - network:
        group_binds:
          - all_containers
          - hosts
        type: "raw"
        container_bridge: "br-mgmt"
        container_interface: "eth1"
        container_type: "veth"
        ip_from_q: "container"
        is_container_address: true
        is_ssh_address: true
    - network:
        group_binds:
          - neutron_linuxbridge_agent
        container_bridge: "br-vxlan"
        container_type: "veth"
        container_interface: "eth10"
        container_mtu: "9000"
        ip_from_q: "tunnel"
        type: "vxlan"
        range: "1:1000"
        net_name: "vxlan"
    - network:
        group_binds:
          - neutron_linuxbridge_agent
        container_bridge: "br-vlan"
        container_type: "veth"
        container_interface: "eth11"
        type: "vlan"
        range: "1:1"
        net_name: "vlan"
    - network:
        group_binds:
          - neutron_linuxbridge_agent
        container_bridge: "br-vlan"
        container_type: "veth"
        container_interface: "eth12"
        host_bind_override: "eth12"
        type: "flat"
        net_name: "flat"
    - network:
        group_binds:
          - glance_api
          - cinder_api
          - cinder_volume
          - nova_compute
          # Uncomment the next line if using swift with a storage network.
          # - swift_proxy
        type: "raw"
        container_bridge: "br-storage"
        container_type: "veth"
        container_interface: "eth2"
        container_mtu: "9000"
        ip_from_q: "storage"

shared-infra_hosts:
{% for h in controller_hosts_ips %}
  {{ shared_infra_hosts_name | default('infra') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}

repo-infra_hosts:
{% for h in controller_hosts_ips %}
  {{ shared_infra_hosts_name | default('infra') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}

identity_hosts:
{% for h in controller_hosts_ips %}
  {{ shared_infra_hosts_name | default('infra') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}

network_hosts:
{% for h in neutron_hosts_ips %}
  {{ shared_infra_hosts_name | default('infra') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}

compute-infra_hosts:
{% for h in compute_hosts_ips %}
  {{ compute_hosts_name | default('compute') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}

compute_hosts:
{% for h in compute_hosts_ips %}
  {{ compute_hosts_name | default('compute') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}

storage-infra_hosts:
{% for h in controller_hosts_ips %}
  {{ shared_infra_hosts_name | default('infra') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}

storage_hosts:
{% for h in cinder_hosts_ips %}
  {{ storage_hosts_name | default('storage') }}{{ loop.index }}:
    ip: {{ h }}
    container_vars:
      cinder_backends:
        limit_container_types: cinder_volume
        lvm:
          volume_backend_name: LVM_iSCSI
          volume_driver: cinder.volume.drivers.lvm.LVMVolumeDriver
          volume_group: cinder-volumes
          iscsi_ip_address: "{{ h }}"
          lvm_type: "thin"
{% endfor %}

haproxy_hosts:
{% for h in controller_hosts_ips %}
  {{ shared_infra_hosts_name | default('infra') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}

dashboard_hosts:
{% for h in controller_hosts_ips %}
  {{ shared_infra_hosts_name | default('infra') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}

orchestration_hosts:
{% for h in controller_hosts_ips %}
  {{ shared_infra_hosts_name | default('infra') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}

image_hosts:
{% for h in controller_hosts_ips %}
  {{ shared_infra_hosts_name | default('infra') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}

log_hosts:
{% for h in controller_hosts_ips %}
  {{ shared_infra_hosts_name | default('infra') }}{{ loop.index }}:
    ip: {{ h }}
{% endfor %}
