# {{ ansible_managed }}
---
cidr_networks: &cidr_networks
  container: {{ container_network_cidr | default('172.29.236.0/22') }}
  tunnel: {{ tunnel_network_cidr | default('172.29.240.0/22') }}
  storage: {{ storage_network_cidr | default('172.29.244.0/22') }}

used_ips:
{% for ip_or_range in reserved_ips %}
  - "{{ ip_or_range }}"
{% endfor %}

global_overrides:
  cidr_networks: *cidr_networks
  internal_lb_vip_address: {{ internal_vip_address | default('172.29.236.100') }}
  # The external IP is quoted simply to ensure that the .aio file can be used as input
  # dynamic inventory testing.
  external_lb_vip_address: "{{ bootstrap_host_public_address | default(ansible_default_ipv4.address) }}"
  management_bridge: "br-mgmt"
  tunnel_bridge: "br-vxlan"
  provider_networks:
    - network:
        group_binds:
          - all_containers
          - hosts
        type: "raw"
        container_bridge: "br-mgmt"
        container_interface: "eth1"
        container_type: "veth"
        ip_from_q: "container"
        is_container_address: true
        is_ssh_address: true
    - network:
        group_binds:
          - neutron_linuxbridge_agent
        container_bridge: "br-vxlan"
        container_type: "veth"
        container_interface: "eth10"
        container_mtu: "9000"
        ip_from_q: "tunnel"
        type: "vxlan"
        range: "1:1000"
        net_name: "vxlan"
    - network:
        group_binds:
          - neutron_linuxbridge_agent
        container_bridge: "br-vlan"
        container_type: "veth"
        container_interface: "eth11"
        type: "vlan"
        range: "1:1"
        net_name: "vlan"
    - network:
        group_binds:
          - neutron_linuxbridge_agent
        container_bridge: "br-vlan"
        container_type: "veth"
        container_interface: "eth12"
        host_bind_override: "eth12"
        type: "flat"
        net_name: "flat"
    - network:
        group_binds:
          - glance_api
          - cinder_api
          - cinder_volume
          - nova_compute
{% if swift is defined and swift | bool %}
          - swift_proxy
{% endif %}
{% if ceph_osd_hosts is defined and ceph_osd_hosts | length > 0 %}
          - ceph_osd
{% endif %}
        type: "raw"
        container_bridge: "br-storage"
        container_type: "veth"
        container_interface: "eth2"
        container_mtu: "9000"
        ip_from_q: "storage"

# Infrastructure (memcached, galera, rabbitmq, ...) hosts
{% if infrastructure_hosts is defined and infrastructure_hosts | length > 0 %}
_infrastructure_hosts: &infrastructure_hosts
{% for h in infrastructure_hosts %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
{% endfor %}
{% endif %}

# Compute hypervisor hosts
{% if compute_hosts is defined and compute_hosts | length > 0 %}
compute_hosts: &compute_hosts
{% for h in compute_hosts %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
{% endfor %}
{% endif %}

# Rsyslog
log_hosts:
{% if logging_hosts is defined and logging_hosts | length > 0 %}
  {{ logging_hosts[0].name }}:
    ip: {{ logging_hosts[0].ip_v4 }}
{% elif infrastructure_hosts is defined and infrastructure_hosts | length > 0 %}
  {{ infrastructure_hosts[0].name }}:
    ip: {{ infrastructure_hosts[0].ip_v4 }}
{% endif %}

##
## Ceph storage
##

{% if ceph_osd_hosts is defined and ceph_osd_hosts | length > 0 %}
# Ceph OSD hosts
ceph-osd_hosts:
{% for h in ceph_osd_hosts %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
{% endfor %}

# Ceph monitor hosts
{% if infrastructure_hosts is defined and infrastructure_hosts | length > 0 %}
ceph-mon_hosts: *infrastructure_hosts
{% endif %}
{% endif %}

##
## Cinder storage
##

{% if lvm_iscsi_hosts is defined and lvm_iscsi_hosts | length > 0 %}
storage_hosts:
{% for h in lvm_iscsi_hosts %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
    container_vars:
      cinder_backends:
        limit_container_types: cinder_volume
        lvm:
          volume_backend_name: LVM_iSCSI
          volume_driver: cinder.volume.drivers.lvm.LVMVolumeDriver
          volume_group: cinder-volumes
          iscsi_ip_address: "{{ h.ip_v4 }}"
          lvm_type: "thin"
{% endfor %}
{% elif ceph_osd_hosts is defined and ceph_osd_hosts | length > 0 %}
{% for h in ceph_osd_hosts %}
  {{ h.name }}:
    ip: {{ h.ip_v4 }}
    container_vars:
      cinder_backends:
        limit_container_types: cinder_volume
        RBD:
          volume_driver: cinder.volume.drivers.rbd.RBDDriver
          rbd_pool: volumes
          rbd_ceph_conf: /etc/ceph/ceph.conf
          rbd_store_chunk_size: 8
          volume_backend_name: rbddriver
          report_discard_supported: true
{%- raw %}
          rbd_user: "{{ cinder_ceph_client }}"
          rbd_secret_uuid: "{{ cinder_ceph_client_uuid }}"
{% endraw %}
{% endfor %}
{% endif %}

##
## Infrastructure middleware
##

{% if infrastructure_hosts is defined and infrastructure_hosts | length > 0 %}
shared-infra_hosts: *infrastructure_hosts

# repository (apt cache, python packages, etc)
repo-infra_hosts: *infrastructure_hosts

# Ideally the load balancer should not use the infrastructure hosts.
# Dedicated hardware is best for improved performance and security.
haproxy_hosts: *infrastructure_hosts
{% endif %}

###
### OpenStack
###

{% if infrastructure_hosts is defined and infrastructure_hosts | length > 0 %}
## Keystone services
identity_hosts: *infrastructure_hosts

# Neutron L2/L3 agents and metadata services
network_hosts: *infrastructure_hosts

# cinder api services
storage-infra_hosts: *infrastructure_hosts

# cinder volume backend (LVM/iSCSI or Ceph RBD) hosts
#storage_hosts: *infrastructure_hosts

# nova api services
compute-infra_hosts: *infrastructure_hosts

# horizon services
dashboard_hosts: *infrastructure_hosts

# heat services
orchestration_hosts: *infrastructure_hosts

# glance services: 
image_hosts: *infrastructure_hosts

# neutron server, agents (L3, etc)
network_hosts: *infrastructure_hosts

{% if metering is defined and metering | bool %}
# ceilometer (telemetry data collection)
metering-infra_hosts: *infrastructure_hosts

# aodh (telemetry alarm service)
metering-alarm_hosts: *infrastructure_hosts

# gnocchi (telemetry metrics storage)
metrics_hosts: *infrastructure_hosts
{% endif %}
{% endif %}
{% if compute_hosts is defined and compute_hosts | length > 0 %}
{% if metering is defined and metering | bool %}

# ceilometer compute agent (telemetry data collection)
metering-compute_hosts: *compute_hosts
{% endif %}
{% endif %}
