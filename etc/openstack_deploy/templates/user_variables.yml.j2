# {{ ansible_managed }}
---
# Copyright 2014, Rackspace US, Inc.
# Copyright 2018, OpenNext SAS. 
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###
### This file contains commonly used overrides for convenience. Please inspect
### the defaults for each role to find additional override options.
###

## Debug and Verbose options (pay attention to high log verbosity when debug set to true).
debug: "{{ onpc_debug_enabled | default(false) }}"
service_region: "{{ onpc_region_name }}"
haproxy_ssl: "{{ onpc_haproxy_ssl_enabled }}"

## Installation method for OpenStack services
# Default option (source) is to install the OpenStack services using PIP
# packages. An alternative method (distro) is to use the distribution cloud
# repositories to install OpenStack using distribution packages
install_method: "{{ lookup('env','INSTALL_METHOD') | default('source', true) }}"

# The container backing store is set to 'lvm' with 'copy-on-write' method
# Options are: [machinectl, overlayfs, btrfs, zfs, dir, lvm]
# If the container backing store is set to 'lvm' a volume group name 'lxc'
# must be created on all nodes hosting LXC containers.
lxc_container_backing_store: "{{ onpc_container_backing_store | default('dir') }}"
lxc_container_backing_method: "{{ onpc_container_backing_method | default('null') }}"

{% if repo_build_pip_extra_indexes is defined and repo_build_pip_extra_indexes | length > 0 %}
## Wheel mirrors for the repo_build to use
repo_build_pip_extra_indexes:
{{ repo_build_pip_extra_indexes | to_nice_yaml }}
{% endif %}

## RabbitMQ Overrides
# By default, openstack-ansible configures all OpenStack services to talk to
# RabbitMQ over encrypted connections on port 5671. To opt-out of this default,
# set the rabbitmq_use_ssl variable to 'false'. The default setting of 'true'
# is highly recommended for securing the contents of RabbitMQ messages.
# rabbitmq_use_ssl: false

## HAProxy and keepalived
# All the previous variables are used inside a var, in the group vars.
# You can override the current keepalived definition (see
# group_all/keepalived.yml) in your user space if necessary.
#
# Uncomment this to disable keepalived installation (cf. documentation)
# haproxy_use_keepalived: False
#
# HAProxy Keepalived configuration (cf. documentation)
# Make sure that this is set correctly according to the CIDR used for your
# internal and external addresses.

## Load Balancer Configuration (haproxy/keepalived)
haproxy_keepalived_external_vip_cidr: "{{ external_vip_cidr }}"
haproxy_keepalived_internal_vip_cidr: "{{ internal_vip_cidr }}"
haproxy_keepalived_external_interface: "{{ external_vip_interface }}"
haproxy_keepalived_internal_interface: "{{ internal_vip_interface }}"

## HAProxy SSL certificates, keys, and CA certificates from your own trusted certificate authority.
{% if haproxy_ssl is defined and haproxy_ssl | bool %}
haproxy_user_ssl_cert: {{ haproxy_ssl_cert_path | default('/etc/openstack_deploy/ssl/openstack_cert.crt') }}
haproxy_user_ssl_key: {{ haproxy_ssl_key_path | default('/etc/openstack_deploy/ssl/openstack_key.key') }}
haproxy_user_ssl_ca_cert: {{ haproxy_ssl_ca_cert_path | default('/etc/openstack_deploy/ssl/openstack_ca.pem') }}
{% endif %}

# Defines the default VRRP id used for keepalived with haproxy.
# Overwrite it to your value to make sure you don't overlap
# with existing VRRPs id on your network. Default is 10 for the external and 11 for the
# internal VRRPs
# haproxy_keepalived_external_virtual_router_id:
# haproxy_keepalived_internal_virtual_router_id:

# Defines the VRRP master/backup priority. Defaults respectively to 100 and 20
# haproxy_keepalived_priority_master:
# haproxy_keepalived_priority_backup:

## Common Glance Overrides
# Set glance_default_store to "swift" if using Cloud Files backend
# or "rbd" if using ceph backend; the latter will trigger ceph to get
# installed on glance. If using a file store, a shared file store is
# recommended. See the OpenStack-Ansible install guide and the OpenStack
# documentation for more details.
# Note that "swift" is automatically set as the default back-end if there
# are any swift hosts in the environment. Use this setting to override
# this automation if you wish for a different default back-end.
#glance_default_store: file

## Ceph pool name for Glance to use
{% if 'ceph' in onpc_services_list%}
glance_default_store: rbd
glance_rbd_store_pool: images
glance_rbd_store_chunk_size: 8
glance_ceph_client: glance
glance_rbd_store_pool: images

## Common Glance Overrides when using a Swift back-end
# By default when 'glance_default_store' is set to 'swift' the playbooks will
# expect to use the Swift back-end that is configured in the same inventory.
# If the Swift back-end is not in the same inventory (ie it is already setup
# through some other means) then these settings should be used.
#
# NOTE: Ensure that the auth version matches your authentication endpoint.
#
# NOTE: If the password for glance_swift_store_key contains a dollar sign ($),
# it must be escaped with an additional dollar sign ($$), not a backslash. For
# example, a password of "super$ecure" would need to be entered as
# "super$$ecure" below.  See Launchpad Bug #1259729 for more details.
{% elif 'swift' in onpc_services_list %}
glance_default_store: swift
glance_swift_store_auth_version: 3
{%- raw %}
glance_swift_store_auth_address: "{{ keystone_service_internalurl }}"
glance_swift_store_key: "{{ glance_service_password }}"
{% endraw %}
glance_swift_store_container: glance_images
glance_swift_store_endpoint_type: internalURL
glance_swift_store_region: "{{ onpc_region_name }}"
glance_swift_store_user: "service:glance"
{% else %}
glance_default_store: file
{% endif %}

## Common Neutron Overrides
# Install standards Neutron plus LBaas V2 plugin
neutron_plugin_base:
  - router
  - metering
  - neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2

## Common Nova Overrides
# When nova_libvirt_images_rbd_pool is defined, ceph will be installed on nova
# hosts.
{% if 'ceph' in onpc_services_list %}
nova_libvirt_images_rbd_pool: vms
{% endif %}

nova_cpu_allocation_ratio: "{{ onpc_cpu_overcommit | default(8.0) }}" 
nova_nova_conf_overrides:
  DEFAULT:
{%- raw %}
    cpu_allocation_ratio: "{{ nova_cpu_allocation_ratio }}"
{% endraw %}
    block_device_allocate_retries: 60
    block_device_allocate_retries_interval: 5
    block_device_creation_timeout: 300

cinder_cinder_conf_overrides:
  DEFAULT:
    image_volume_cache_enabled: true
{% if 'ceph' in onpc_services_list %}
  ceph:
    image_volume_cache_enabled: true
{% endif %}

{% if 'ceph' in onpc_services_list %}
cinder_default_volume_type: rbddriver
{% else %}
cinder_default_volume_type: LVM_iSCSI
{% endif %}

## Tempest settings
{% if onpc_bootstrap_container_tech == 'nspawn' %}
tempest_public_subnet_cidr: "{{ container_network }}"
tempest_public_subnet_allocation_pools: "172.29.239.110-172.29.239.200"
{% else %}
## Tempest settings
tempest_public_subnet_cidr: "{{ external_network }}"
tempest_public_subnet_allocation_pools: "172.29.249.110-172.29.249.200"
{% endif %}
tempest_install: {{ onpc_run_tempest_tests }}
tempest_run: {{ onpc_run_tempest_tests }}

## Additional pinning generator that will allow for more packages to be pinned as you see fit.
## All pins allow for package and versions to be defined. Be careful using this as versions
## are always subject to change and updates regarding security will become your problem from this
## point on. Pinning can be done based on a package version, release, or origin. Use "*" in the
## package name to indicate that you want to pin all package to a particular constraint.
# apt_pinned_packages:
#   - { package: "lxc", version: "1.0.7-0ubuntu0.1" }
#   - { package: "libvirt-bin", version: "1.2.2-0ubuntu13.1.9" }
#   - { package: "rabbitmq-server", origin: "www.rabbitmq.com" }
#   - { package: "*", release: "MariaDB" }

## Environment variable settings
# This allows users to specify the additional environment variables to be set
# which is useful in setting where you working behind a proxy. If working behind
# a proxy It's important to always specify the scheme as "http://". This is what
# the underlying python libraries will handle best. This proxy information will be
# placed both on the hosts and inside the containers.

## Example environment variable setup:
## This is used by apt-cacher-ng to download apt packages:
# proxy_env_url: http://username:pa$$w0rd@10.10.10.9:9000/

{% if onpc_proxy_host is defined and onpc_proxy_host | length > 0 %}
proxy_env_url: "http://{{ onpc_proxy_host }}:{{ onpc_proxy_port | default(8000) }}/"
{% endif %}

{% if onpc_proxy_host is defined and onpc_proxy_host | length > 0 %}
## (1) This sets up a permanent environment, used during and after deployment:
{%- raw %}
# no_proxy_env: "localhost,127.0.0.1,{{ internal_lb_vip_address }},{{ external_lb_vip_address }},{% for host in groups['all_containers'] %}{{ hostvars[host]['container_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"
{% endraw %}

# global_environment_variables:
#   HTTP_PROXY: "{{ proxy_env_url }}"
#   HTTPS_PROXY: "{{ proxy_env_url }}"
#   NO_PROXY: "{{ no_proxy_env }}"
#   http_proxy: "{{ proxy_env_url }}"
#   https_proxy: "{{ proxy_env_url }}"
#   no_proxy: "{{ no_proxy_env }}"
{% endif %}

{% if onpc_proxy_host is defined and onpc_proxy_host | length > 0 %}
## (2) This is applied only during deployment, nothing is left after deployment is complete:
deployment_environment_variables:
   http_proxy: "{{ proxy_env_url }}"
   https_proxy: "{{ proxy_env_url }}"
{%- raw %}
  no_proxy: "localhost,127.0.0.1,{{ internal_lb_vip_address }},{{ external_lb_vip_address }},{% for host in groups['keystone_all'] %}{{ hostvars[host]['container_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"
{% endraw %}
{% endif %}

## SSH connection wait time
# Increase delay for the ssh connection check if desired.
ssh_delay: "{{ onpc_ssh_delay | default(5) }}"
