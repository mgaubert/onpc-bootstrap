## ONPC customized kickstart file, extra functions:
## 1. add static ip and hostname
## 2. add sudo users
## 3. change ssh config(change port)
## 4. Create OSA partitions

# This kickstart file is used to install an infra host in OSA.
# It should only be used with EL > 5 and/or Fedora > 7.
# For older versions please use the sample.ks kickstart file.
# platform=x86, AMD64, or Intel EM64T

# Install OS instead of upgrade
install
# Use text mode install
text
# Use network installation
network --bootproto dhcp
url --url=$tree
# System authorization information
auth  --useshadow  --enablemd5
# System bootloader configuration
bootloader --location=mbr
# Firewall configuration
firewall --disabled
# Run the Setup Agent on first boot
firstboot --disable
# System keyboard
keyboard us
# System language
lang en_US.UTF-8 
# If any cobbler repo definitions were referenced in the kickstart profile,
# include them here.
$yum_repo_stanza
# Network information
$SNIPPET('network_config')
# Reboot after installation
reboot

# Root password
rootpw --iscrypted $default_password_crypted
# SELinux configuration
selinux --disabled
# Do not configure the X Window System
skipx
# System timezone
timezone --utc {{ cobbler_default_time_zone }}

# Create default user account
user --groups={{ onpc_default_group }} --name={{ onpc_default_user }} --password='{{ onpc_default_user_crypted_password }}' --iscrypted

# Create custom user accounts
{% if onpc_users_list is defined and onpc_users_list | length > 0 %}
{% for user in onpc_users_list %}
user --groups={{ user.group }} --name={{ user.name }} --password='{{ user.crypted_password }}' --iscrypted
{% endfor %}
{% endif %}

# Partition clearing information
clearpart --all --initlabel --drives=sda
# Clear the Master Boot Record
zerombr
# Disk partitioning
{% if onpc_netboot_profiles is defined %}
{%   if onpc_netboot_profiles['infra']['boot_arch'] == 'efi' %}
part /boot/efi --fstype=efi --size=200 --ondrive=sda
{%   else %}
part biosboot --fstype=biosboot --size=1 --ondrive=sda
part /boot --fstype=ext4 --size=1024 --ondrive=sda
{%   endif %}
part swap --fstype=swap --recommended --ondrive=sda
{% for val in onpc_netboot_profiles['infra']['partitions'] %}
{%   set args = [] %}
{%   if val.type is defined and val.type in onpc_valid_partition_types %}
{%     set _ = args.append(val.type) %}
{%     if val.mountpoint is defined and (val.mountpoint | length > 0) %}
{%       set _ = args.append(val.mountpoint) %}
{%     else %}
{%       set _ = args.append(val.partition_name) %}
{%     endif %}
{%     if val.type == 'volgroup' %}
{%       set _ = args.append(val.pvname) %}
{%     endif %}
{%     if val.fstype is defined and (val.fstype | length > 0) %}
{%       set _ = args.append('--fstype=' + val.fstype) %}
{%       if val.fstype == 'swap' and val.size is not defined %}
{%         set _ = args.append('--recommended') %}
{%       endif %}
{%     endif %}
{%     if val.size is not defined and val.percent is defined and (val.percent | string | length > 0) %}
{%       set _ = args.append('--percent=' + (val.percent | string)) %}
{%     endif %}
{%     if val.size is defined and (val.size | string | length > 0) %}
{%       set _ = args.append('--size=' + (val.size | string)) %}
{%     endif %}
{%     if val.maxsize is defined and (val.maxsize | string | length > 0) %}
{%       set _ = args.append('--maxsize=' + (val.maxsize | string)) %}
{%       set _ = args.append('--grow') %}
{%     elif val.grow is defined and val.grow is sameas true %}
{%       set _ = args.append('--grow') %}
{%     endif %}
{%     if val.drive is defined and (val.drive | length > 0) %}
{%       set _ = args.append('--ondrive=' + val.drive) %}
{%     endif %}
{%     if val.asprimary is defined and val.asprimary is sameas true %}
{%       set _ = args.append('--asprimary') %}
{%     endif %}
{%     if val.type == 'logvol' %}
{%       set _ = args.append('--name=' + val.partition_name) %}
{%     endif %}
{%     if val.vgname is defined and (val.vgname | length > 0)  %}
{%       set _ = args.append('--vgname=' + val.vgname) %}
{%     endif %}
{%   endif %}
{{ args | join(' ')}}
{% endfor %}
{% endif %}

%pre
$SNIPPET('log_ks_pre')
$SNIPPET('kickstart_start')
$SNIPPET('pre_install_network_config')
# Enable installation monitoring
$SNIPPET('pre_anamon')
%end

%packages
@core
openssh-server
sudo
python
bridge-utils
iputils
lsof
lvm2
bind-utils
wget
$SNIPPET('func_install_if_enabled')
%end

%post --nochroot
$SNIPPET('log_ks_post_nochroot')
%end

%post
$SNIPPET('log_ks_post')
{% if onpc_users_list is defined and onpc_users_list | length > 0 %}
## Import ssh keys
##{% for user in onpc_users_list %}
##sshkey --username={{ user.name}} "{{ user.key }}"
##{% endfor %}
##{% endif %}
sed -i -e 's|^# %wheel\tALL=(ALL)\tNOPASSWD: ALL|%wheel\tALL=(ALL)\tNOPASSWD: ALL|; s|^Defaults requiretty|#&|' /etc/sudoers
# Start yum configuration
$yum_config_stanza
# End yum configuration
$SNIPPET('post_install_kernel_options')
## NetworkManager is incompatible with Linux Bridge
systemctl stop NetworkManager.service
systemctl disable NetworkManager.service
systemctl mask NetworkManager.service
systemctl enable network.service
$SNIPPET('post_install_network_config')
$SNIPPET('func_register_if_enabled')
$SNIPPET('download_config_files')
$SNIPPET('koan_environment')
$SNIPPET('redhat_register')
$SNIPPET('cobbler_register')
# Enable post-install boot notification
$SNIPPET('post_anamon')
$SNIPPET('add_root_ssh_keys')
$SNIPPET('add_users_ssh_keys')
# Start final steps
$SNIPPET('kickstart_done')
# End final steps
%end