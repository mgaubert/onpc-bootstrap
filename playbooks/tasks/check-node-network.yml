---
# Copyright 2015, Rackspace US, Inc.
# Copyright (c) 2018, OpenNext SAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- fail:
    msg: "Wrong network specification"
  when: (network_setup is not defined
         or not network_setup.get('name')
         or not network_setup.get('cidr')
         or not network_setup.get('interface'))

- name: Set network roles fact
  set_fact:
    network_roles: "{{ network_setup.get('roles', []) }}"

- name: Set interface name
  set_fact:
    interface_name: "{{ network_setup.get('interface') }}"

- name: "Set network interface '{{ interface_name }}' fact"
  set_fact:
    network_interface: "{{ hostvars.get(inventory_hostname, {}).get('ansible_' + interface_name | replace('-', '_'), {}) }}"

- name: "Check that interface '{{ interface_name }}' exists"
  assert:
    that:
      - network_interface is defined
    msg: "Interface '{{ interface_name }}' doesn't exists"

- name: "Set interface '{{ interface_name }}' state fact"
  set_fact:
    active_state: "{{ network_interface.get('active', False) }}" 

- name: "Check interface '{{ interface_name }}' state"
  assert:
    that: active_state == True
    msg: "Interface '{{ interface_name }}' is not active"
  when:
    - (network_roles | length == 0) or (network_roles | intersect(onpc_node_roles) | length > 0)

- name: "Set interface '{{ interface_name }}' IP address fact"
  set_fact:
    interface_address: "{{ network_interface.get('ipv4', {}).get('address', '') }}" 

- debug: var=interface_address

- name: "Check that interface 'br-vlan' is not assigned an IP address"
  assert:
    that: interface_address | length == 0
    msg: "Interface 'br-vlan' must not have '{{ interface_address }}' IP address assigned"
  when: interface_name == 'br-vlan'

- name: "Set interface '{{ interface_name }}' type"
  set_fact:
    interface_type: "{{ network_interface.get('type', {}) }}" 

- debug: var=network_interface
- debug: var=network_roles
- debug: var=interface_type

- name: "Check that interface '{{ interface_name }}' is a bridge"
  assert:
    that:
    - interface_type == 'bridge'
    msg: "The interface type'{{ interface_type }}' must be 'bridge' }}'"
  when:
    - (network_roles | length == 0) or (network_roles | intersect(onpc_node_roles) | length > 0)

- name: "Check that interface '{{ interface_name }}' has a valid IP address"
  assert:
    that:
      - interface_address | ipaddr(network_setup.get('cidr')) | length > 0
    msg: "The address '{{ interface_address }}' must be  within range '{{ network_setup.get('cidr') }}'"
  when:
    - (network_roles | length == 0) or (network_roles | intersect(onpc_node_roles) | length > 0)
    - interface_name != "br-vlan"