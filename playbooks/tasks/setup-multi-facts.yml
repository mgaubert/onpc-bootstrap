---
# Copyright (c) 2018, OpenNext SAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
   
- name: Set hosts list facts by role
  set_fact:
    infra_hosts_list: "{% set sel = [] %}{% if 'controller' in groups %}{% for host in groups['controller'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    compute_hosts_list: "{% set sel = [] %}{% if 'compute' in groups %}{% for host in groups['compute'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    storage_hosts_list: "{% set sel = [] %}{% if 'storage' in groups %}{% for host in groups['storage'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    ceph_hosts_list: "{% set sel = [] %}{% if 'ceph' in groups %}{% for host in groups['ceph']  %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    network_hosts_list: "{% set sel = [] %}{% if 'network' in groups %}{% for host in groups['network'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    monitoring_hosts_list: "{% set sel = [] %}{% if 'monitoring' in groups %}{% for host in groups['monitoring'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    logging_hosts_list: "{% set sel = [] %}{% if 'logging' in groups %}{% for host in groups['logging'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    swift_hosts_list: "{% set sel = [] %}{% if 'swift' in groups %}{% for host in groups['swift'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    image_hosts_list: "{% set sel = [] %}{% if 'image' in groups %}{% for host in groups['image'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    nfs_hosts_list: "{% set sel = [] %}{% if 'nfs' in groups %}{% for host in groups['nfs'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"

- name: Set first controller node fact
  set_fact:
    first_controller_node_name: "{{ infra_hosts_list | sort | first }}"

- name: Set hosts list facts by default
  set_fact:
    network_hosts_list: "{% if network_hosts_list | length == 0  %}{{ infra_hosts_list}}{% endif %}"
    monitoring_hosts_list: "{% if monitoring_hosts_list | length == 0  %}{{ infra_hosts_list}}{% else %}{{ monitoring_hosts_list }}{% endif %}"
    logging_hosts_list: "{% if logging_hosts_list | length == 0  %}{{ infra_hosts_list}}{% else %}{{ logging_hosts_list }}{% endif %}"
    image_hosts_list: "{% if image_hosts_list | length == 0  %}{{ infra_hosts_list}}{% else %}{{ image_hosts_list }}{% endif %}"
    nfs_hosts_list: "{% if nfs_hosts_list | length == 0  %}{{ infra_hosts_list}}{% else %}{{ nfs_hosts_list }}{% endif %}"

- name: Set hosts list name and IP address parameters facts
  set_fact:
    infrastructure_hosts_dict: "{% set sel = [] %}{% for host in infra_hosts_list %}{% set l = sel.append({'name': host.split('.')[0] | lower, 'hostname': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    storage_hosts_dict: "{% set sel = [] %}{% for host in storage_hosts_list %}{% set l = sel.append({'name': host.split('.')[0] | lower, 'hostname': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    ceph_osd_hosts_dict: "{% set sel = [] %}{% for host in ceph_hosts_list %}{% set l = sel.append({'name': host.split('.')[0] | lower, 'hostname': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    compute_hosts_dict: "{% set sel = [] %}{% for host in compute_hosts_list %}{% set l = sel.append({'name': host.split('.')[0] | lower, 'hostname': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    network_hosts_dict: "{% set sel = [] %}{% for host in network_hosts_list %}{% set l = sel.append({'name': host.split('.')[0] | lower, 'hostname': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    image_hosts_dict: "{% set sel = [] %}{% for host in image_hosts_list %}{% set l = sel.append({'name': host.split('.')[0] | lower, 'hostname': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    monitoring_hosts_dict: "{% set sel = [] %}{% for host in monitoring_hosts_list %}{% set l = sel.append({'name': host.split('.')[0] | lower, 'hostname': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    logging_hosts_dict: "{% set sel = [] %}{% for host in logging_hosts_list %}{% set l = sel.append({'name': host.split('.')[0] | lower, 'hostname': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    swift_hosts_dict: "{% set sel = [] %}{% for host in swift_hosts_list %}{% set l = sel.append({'name': host.split('.')[0] | lower, 'hostname': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    nfs_hosts_dict: "{% set sel = [] %}{% for host in nfs_hosts_list %}{% set l = sel.append({'name': host.split('.')[0] | lower, 'hostname': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"

- name: Set NFS backing store host fact
  set_fact:
    glance_nfs_store_host: "{{ nfs_hosts_dict[0].ip_v4 }}"
  when:
    - swift_hosts_list is not defined or swift_hosts_list | length == 0
    - ceph_hosts_list is not defined or ceph_hosts_list | length == 0

- name: Set onpc_services_list for Ceph
  set_fact:
    onpc_services_list: "{{ onpc_services_list + ['ceph'] }}"
  when: ceph_hosts_list is defined and ceph_hosts_list | length > 0

- name: Set onpc_services_list for Swift
  set_fact:
    onpc_services_list: "{{ onpc_services_list + ['swift'] }}"
  when: swift_hosts_list is defined and swift_hosts_list | length > 0

- name: Set onpc_partions_list
  set_fact:
    onpc_partitions_list: >-
        {%- set partitions_list = [] %}
        {%- for partition in onpc_osa_partitions %}
        {%- if (partition.get('name', '') | regex_search('^ceph', ignorecase=true)) and ('ceph' in onpc_services_list) %}
            {{- partitions_list.append(partition) }}
        {%- elif (partition.get('name', '') | regex_search('^swift', ignorecase=true)) and ('swift' in onpc_services_list) %}
            {{- partitions_list.append(partition) }}
        {%- elif (partition.get('name', '') | regex_search('^openstack', ignorecase=true)) %}
            {{- partitions_list.append(partition) }}
        {%- elif (partition.get('name', '') | regex_search('^cinder', ignorecase=true)) %}
            {{- partitions_list.append(partition) }}
        {%- elif (partition.get('name', '') | regex_search('^root$', ignorecase=true)) %}
            {{- partitions_list.append(partition) }}
        {%- endif %}
        {%- endfor %}
        {{- partitions_list | join(',') }}

- set_fact:
    _internal_vip_address: "{{ hostvars[first_controller_node_name]['ansible_facts']['br_mgmt']['ipv4']['address'].split('.')[:-1] + ['100'] }}"

- name: Set reserved_ips facts
  set_fact:
    reserved_ips: "{% set sel = [] %}{% for net in onpc_osa_networks %}{% for rsv in net['reserved'] %}{% set l = sel.append(rsv) %}{% endfor %}{% endfor %}{{ sel }}"

- name: Set internal_vip_address facts
  set_fact:
    internal_vip_address: "{{ _internal_vip_address | join('.') }}"

- set_fact:
    _internal_vip_netmask: "{{ hostvars[first_controller_node_name]['ansible_facts']['br_mgmt']['ipv4']['network'] }}/{{ hostvars[first_controller_node_name]['ansible_facts']['br_mgmt']['ipv4']['netmask'] }}"

- name: Set internal_vip_cidr fact
  set_fact:
    internal_vip_cidr: "{{ internal_vip_address }}/{{ _internal_vip_netmask | ipaddr('prefix') }}"

- name: Set internal_vip_interface fact
  set_fact:
    internal_vip_interface: "{{ hostvars[first_controller_node_name]['ansible_facts']['br_mgmt']['device'] }}"

- set_fact:
    _external_vip_address: "{{ hostvars[first_controller_node_name]['ansible_facts']['default_ipv4']['address'].split('.')[:-1] + ['100'] }}"

- name: Set external_vip_address facts
  set_fact:
    external_vip_address: "{{ _external_vip_address | join('.') }}"

- set_fact:
    _external_vip_netmask: "{{ hostvars[first_controller_node_name]['ansible_facts']['default_ipv4']['network'] }}/{{ hostvars[first_controller_node_name]['ansible_facts']['default_ipv4']['netmask'] }}"
- name: Set external_vip_cidr fact
  set_fact:
    external_vip_cidr: "{{ external_vip_address}}/{{ _external_vip_netmask | ipaddr('prefix') }}"

- name: Set external_vip_interface fact
  set_fact:
    external_vip_interface: "{{ hostvars[first_controller_node_name]['ansible_facts']['default_ipv4']['interface'] }}"

