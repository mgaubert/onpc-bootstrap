---
# Copyright (c) 2018, OpenNext SAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
   
- name: Set hosts list facts by role
  set_fact:
    infra_hosts_list: "{% set sel = [] %}{% if 'controller' in groups %}{% for host in groups['controller'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    compute_hosts_list: "{% set sel = [] %}{% if 'compute' in groups %}{% for host in groups['compute'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    storage_hosts_list: "{% set sel = [] %}{% if 'storage' in groups %}{% for host in groups['storage'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    ceph_hosts_list: "{% set sel = [] %}{% if 'ceph' in groups %}{% for host in groups['ceph']  %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    network_hosts_list: "{% set sel = [] %}{% if 'network' in groups %}{% for host in groups['network'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    monitoring_hosts_list: "{% set sel = [] %}{% if 'monitoring' in groups %}{% for host in groups['monitoring'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    logging_hosts_list: "{% set sel = [] %}{% if 'logging' in groups %}{% for host in groups['logging'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"
    swift_hosts_list: "{% set sel = [] %}{% if 'swift' in groups %}{% for host in groups['swift'] %}{% set l = sel.append(host) %}{% endfor %}{% endif %}{{ sel }}"

- name: Set first controller node fact
  set_fact:
    first_controller_node_name:  "{{ infra_hosts_list | sort | first }}"

# Not sure about this  (commented for now...)
#- name: Set Swift facts
#  set_fact:
#    swift: "{% if swift_hosts_list | length > 0 %}True{% else %}False{% endif %}"

- name: Set hosts list facts by default
  set_fact:
    network_hosts_list: "{% if network_hosts_list | length == 0  %}{{ infra_hosts_list}}{% endif %}"
    monitoring_hosts_list: "{% if monitoring_hosts_list | length == 0  %}{{ infra_hosts_list}}{% else %}{{ monitoring_hosts_list }}{% endif %}"
    logging_hosts_list: "{% if logging_hosts_list | length == 0  %}{{ infra_hosts_list}}{% else %}{{ logging_hosts_list }}{% endif %}"
    image_hosts_list: "{% if image_hosts_list | length == 0  %}{{ infra_hosts_list}}{% else %}{{ image_hosts_list }}{% endif %}"

- name: Set hosts list name and IP address parameters facts
  set_fact:
    infrastructure_hosts_dict: "{% set sel = [] %}{% for host in infra_hosts_list %}{% set l = sel.append({'name': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    storage_hosts_dict: "{% set sel = [] %}{% for host in storage_hosts_list %}{% set l = sel.append({'name': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    ceph_osd_hosts_dict: "{% set sel = [] %}{% for host in ceph_hosts_list %}{% set l = sel.append({'name': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    compute_hosts_dict: "{% set sel = [] %}{% for host in compute_hosts_list %}{% set l = sel.append({'name': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    network_hosts_dict: "{% set sel = [] %}{% for host in network_hosts_list %}{% set l = sel.append({'name': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    image_hosts_dict: "{% set sel = [] %}{% for host in image_hosts_list %}{% set l = sel.append({'name': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    monitoring_hosts_dict: "{% set sel = [] %}{% for host in monitoring_hosts_list %}{% set l = sel.append({'name': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"
    logging_hosts_dict: "{% set sel = [] %}{% for host in logging_hosts_list %}{% set l = sel.append({'name': host, 'ip_v4': hostvars[host]['ansible_br_mgmt']['ipv4']['address']}) %}{% endfor %}{{ sel }}"

- name: Set networking facts
  set_fact:
    primary_net_itf: "{% set sel = [] %}{% for itf in hostvars.get(first_controller_node_name, {}).get('ansible_interfaces', []) %}{% set l = sel.append(itf) %}{% endfor %}{{ sel }}"
    reserved_ips: "{% set sel = [] %}{% for net in onpc_networks %}{% for rsv in net['reserved'] %}{% set l = sel.append(rsv) %}{% endfor %}{% endfor %}{{ sel }}"
    internal_vip_address: "{% set sel = container_network.split('.')[:-1] + ['100'] %}{{ sel | join('.') }}"
    external_vip_address: "{% set sel = external_network.split('.')[:-1] + ['100'] %}{{ sel | join('.') }}"

- name: Set HAProxy - Keepalive facts
  set_fact:
    internal_vip_cidr: "{{ internal_vip_address }}/{{ container_network.split('/')[1] }}"
    external_vip_cidr: "{{ external_vip_address }}/{{ external_network.split('/')[1] }}"
    internal_vip_interface: "{{ hostvars[first_controller_node_name]['ansible_facts']['br_mgmt']['device'] }}"
    external_vip_interface: "{{ hostvars[first_controller_node_name]['ansible_facts']['default_ipv4']['interface'] }}"
 
- debug: var=primary_net_itf
- debug: var=internal_vip_address
- debug: var=external_vip_address
- debug: var=internal_vip_cidr
- debug: var=external_vip_cidr
- debug: var=internal_vip_interface
- debug: var=external_vip_interface
- debug: var=reserved_ips
- debug: var=onpc_node_roles
- debug: var=onpc_managed_node
