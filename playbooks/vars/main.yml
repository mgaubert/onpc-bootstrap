---
# Copyright (c) 2019, Patrick Petit <patrick.michel.petit@gmail.com>

#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

onpc_openstack_release: 19.0.2
onpc_openstack_branch: stable/stein
onpc_openstack_rdo: https://rdoproject.org/repos/openstack-stein/rdo-release-stein.rpm
onpc_lma_branch: master
onpc_debug_enabled: False
onpc_low_end_profile: False
onpc_cpu_overcommit: 8.0
onpc_openstack_domain: "openstacklocal"
onpc_infra_domain: "openstack.local"
onpc_region_name: "RegionOne"
# Enable / disable multi-domain support in Horizon
onpc_multidomain_support: false
onpc_partitions_check: true

# The variable onpc_environment_name is used to tag the monitoring metrics
# and alerts. To be removed.
# onpc_environment_name: "{{ environment_name | default(onpc_infra_domain, true) }}"
onpc_run_tempest_tests: False
onpc_valid_roles:
  - controller
  - storage
  - ceph
  - compute
  - network
  - logging
  - monitoring
  - swift
  - image
  - haproxy
  - rsyslog
  - nfs

# valid partitons types used in onpc_netboot_profiles
# and kickstart templates
onpc_valid_partition_types:
  - part
  - volgroup
  - logvol

##
## OpenStack environment bootstrap scenarios
##
# Note: Cobbler is the only supported tool
# to provision the target hosts in OpenNext.
# Other host provisioning tools (such as MAAS) have been
# tested with various degrees of success but are not
# supported  at this time.
onpc_bootstrap_scenario: "{{ lookup('env','SCENARIO') | default('cobbler_distro_lxc_standard_ceph', true) }}"
onpc_bootstrap_config_path: ../etc/openstack_deploy
onpc_install_method: "{{ (onpc_bootstrap_scenario is search('distro')) | ternary('distro', 'source') }}"
onpc_bootstrap_container_tech: "{{ (onpc_bootstrap_scenario is search('nspawn')) | ternary('nspawn', 'lxc') }}"
onpc_scenario_list: "{{ (onpc_bootstrap_scenario.split('_') | reject('equalto', '')) | list }}"
onpc_services_list: >-
  {%- set scenario_list = onpc_scenario_list %}
  {%- set service_list = ['keystone', 'cinder', 'glance', 'neutron', 'nova'] %}
  {%- set service_list_extra = scenario_list | difference(['cobbler', 'distro', 'lxc', 'nspawn', 'metal', 'source', 'starter', 'standard', 'extended', 'coe']) %}
  {%- if 'ceph' in scenario_list %}
  {%-   set _ = service_list.extend(['ceph']) %}
  {%- endif %}
  {%- if 'swift' in scenario_list %}
  {%-   set _ = service_list.extend(['swift']) %}
  {%- endif %}
  {%- if 'metal' not in scenario_list %}
  {%-   set _ = service_list.extend(['haproxy']) %}
  {%- endif %}
  {%- if 'starter' in scenario_list %}
  {%-   set _ = service_list.extend(['rsyslog', 'nfs']) %}
  {%- endif %}
  {%- if 'standard' in scenario_list %}
  {%-   set _ = service_list.extend(['logging', 'monitoring']) %}
  {%- endif %}
  {%- if 'extended' in scenario_list %}
  {%-   set _ = service_list.extend(['ceilometer', 'aodh', 'heat', 'barbican', 'designate', 'logging', 'monitoring']) %}
  {%- endif %}
  {%- if 'coe' in scenario_list %}
  {%-   set _ = service_list.extend(['ceilometer', 'gnocchi', 'aodh', 'heat', 'magnum', 'barbican', 'designate','octavia', 'logging', 'monitoring']) %}
  {%- endif %}
  {%- set _ = service_list.extend(service_list_extra) %}
  {{- (service_list | unique) | sort }}


##
## List of users and ssh keys to provision on target hosts
##   This must be defined in onpc_user_config.yml
##
onpc_default_user: centos
onpc_default_group: wheel
onpc_default_user_password: "{{ default_user_password | default('change@me') }}"
onpc_users_list: []


## 
## OpenNext Networking configuration
##

# management_network: used to provide access the internal services and containers
# tunnel_network: used by tenants private networks 
# storage_network: used by the storage services (optional)
# 
# OpenStack-Ansible uses bridges to connect physical and logical network
# interfaces on the host to virtual network interfaces within containers.
# Target hosts need to be configured with the following network bridges:
#
# ====================================================================== 
# Bridge name   Configured on          With a assign_ip IP
# ====================================================================== 
# br-mgmt       Every host             Always
# ----------------------------------------------------------------------
# br-storage    Every storage host	   When component deployed on metal	
#               Every compute host	   Always
# ----------------------------------------------------------------------
# br-vxlan      Every network host     When component deployed on metal
#               Every compute host     Always
# ----------------------------------------------------------------------
# br-vlan       Every network host     Never
#               Every compute host     Never
# ----------------------------------------------------------------------
# br-api        Every controller host  Always
# ----------------------------------------------------------------------

##
## OpenNext VLAN IDs.
##   This can be adjusted for your environment in onpc-site-config.yml
management_vlan_id: "10"
tunnel_vlan_id: "20"
storage_vlan_id: "30"
api_vlan_id: "1"

bond0_interface: bond0
bond1_interface: bond1
management_network_interface: br-mgmt
tunnel_network_interface: br-vxlan
storage_network_interface: br-storage
api_network_interface: "{{ bond0_interface }}"

##
## OpenStack provider network inferfaces
##
external_interface: br-vlan
external_physical_interface: "{{ bond1_interface }}"
external_network_openstack_name: flat
# Only flat or vlan
external_network_type: flat
# Only use if external_network_type == vlan
external_network_vlan: "1:100"

# Optionnal
provider_interface: ""
provider_physical_interface: ""
provider_network_openstack_name: provider
# Only flat or vlan
provider_network_type: flat
# Only use if provider_network_type == vlan
provider_network_vlan: "1:100"

#management_vlan_interface: "{{ bond0_interface + '.' + management_vlan_id }}"
management_vlan_interface: "{{ bond1_interface + '.' + management_vlan_id }}"
tunnel_vlan_interface: "{{ bond1_interface + '.' + tunnel_vlan_id }}"
#storage_vlan_interface: "{{ bond0_interface + '.' + storage_vlan_id }}"
storage_vlan_interface: "{{ bond1_interface + '.' + storage_vlan_id }}"

external_vip_addr: "{{ (api_network.split('.')[:-1] + ['100']) | join('.') }}"
internal_vip_addr: "{{ (management_network.split('.')[:-1] + ['100']) | join('.') }}"

##
## OpenNext standards networks CIDR definition
##   This can be adjusted for your environment in onpc-site-config.yml
management_network: 172.29.236.0/22
tunnel_network: 172.29.240.0/22
storage_network: 172.29.244.0/22
external_network: 172.29.248.0/22
api_network: 172.31.0.0/24

##
## Dictionary of standard OSA networks
##
# Adjust as per your environment to include any IP addresses that
# are already used by existing physical hosts in the environment
# where OpenStack will be deployed (and ensuring that you've
# included any reserved IP addresses for physical growth too).
# Single IP addresses or ranges (start and end placed either side
# of a ',') can be placed under the 'reserved' stanza for each OSA network.
## Platform default gateway.
## Example:
#onpc_gateway_addr: 172.29.236.1

## NTP time server addr
## Example:
# onpc_time_addr: 172.29.236.1

## Proxy server
## Example:
#onpc_proxy_server: 172.29.236.1
onpc_use_jumbo_frames: False
onpc_osa_networks_check: True
onpc_osa_networks:
  management:
    cidr: "{{ management_network }}"
    interface: "{{ management_network_interface }}"
    reserved:
      - "172.29.236.10,172.29.236.20"
      - "172.29.236.1"
      - "{{ internal_vip_addr }}"
    roles: ['all']
  tunnel:
    cidr: "{{ tunnel_network }}"
    interface: "{{ tunnel_network_interface }}"
    reserved:
      - "172.29.240.10,172.29.240.20"
    roles: ['network', 'compute']
  storage:
    cidr: "{{ storage_network }}"
    interface: "{{ storage_network_interface }}"
    reserved:
      - "172.29.244.10,172.29.244.20"
    roles: ['storage', 'compute', 'ceph']
  external:
    cidr: "{{ external_network }}"
    interface: "{{ external_interface }}"
    reserved: []
    roles: ['network', 'compute']

##
## Dictionary of netboot ISOs to register in Cobbler
##   This must be defined in onpc-site-config.yml
##
onpc_netboot_distros: {}

##
## Dictionary of netboot profiles to register in Cobbler
##   This must be defined in onpc-site-config.yml
##
onpc_netboot_profiles: {}

## List of netboot systems to register in Cobbler
##   This must be defined in onpc-site-config.yml
##
onpc_netboot_systems: []

##
## Proxy cache config
##
# In situations where the Internet access is blocked from
# the target hosts, a proxy server (Squid) can be
# installed on the master host to remedy this problem.
# Internet access is required to be able to get the
# needed resources during the deployment phase such as
# packages, LXC container images, Ansible roles and so
# so on.
# Check https://docs.openstack.org/openstack-ansible/latest/user/limited-connectivity
# for additional details.
#
# Three proxy modes are supported.
# - transparent: Internet access is mediated through the
#                proxy in a transparent manner. No proxy
#                settings is needed to access the Internet
#                from the target hosts.
# - transient: Internet access is mediated through the
#              proxy only during the deployment phase.
#              Target hosts clients such as wget will not
#              be able to access external resources after
#              deployment.
# - permanent: Internet access is mediated through the
#              proxy during and after deployment.
#              Caution must apply for large deployment because
#              The maximum length of no_proxy should not exceed
#              1024 characters.
onpc_proxy_mode: transparent

##
## Sensu channels config
##
# Slack channel for sending alerts.
# onpc_slack_alerts:
#  channels:
#    - name: ''
#      uuid: ''

# Use Sensu handlers for sending alerts
onpc_sensu_alerts:
  handlers:
    - default

# Disable the installation of repo_server
onpc_repo_server_enabled: false